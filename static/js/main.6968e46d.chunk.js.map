{"version":3,"sources":["App.js","index.js"],"names":["App","useState","parseInt","localStorage","getItem","big","setBig","small","setSmall","goal","setGoal","tdBig","setTdBig","tdSmall","setTdSmall","tdGoal","setTdGoal","useEffect","updateTodayGoal","perDay","Math","ceil","tdCount","dateStr","dateStored","Date","now","cmpDate1","UTC","getFullYear","getMonth","getDate","cmpDate2","console","log","setItem","updateTodayBig","value","updateTodaySmall","React","open","setOpen","handleClose","Container","className","style","display","TableContainer","component","Paper","Table","size","TableHead","TableRow","TableCell","align","colSpan","Button","variant","color","onClick","TableBody","scope","IconButton","Dialog","onClose","DialogContent","TextField","autoFocus","label","type","fullWidth","onChange","evt","target","DialogActions","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.6968e46d.chunk.js","sourcesContent":["import './App.css';\nimport {\n    Button,\n    Container,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    IconButton,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TextField\n} from \"@mui/material\";\nimport {AiFillMinusCircle, AiFillPlusCircle} from \"react-icons/all\";\nimport React, {useEffect, useState} from \"react\";\n\nfunction App() {\n    const [big, setBig] = useState(parseInt(localStorage.getItem('big') ?? '0'));\n    const [small, setSmall] = useState(parseInt(localStorage.getItem('small') ?? '0'));\n    const [goal, setGoal] = useState(parseInt(localStorage.getItem('goal') ?? '0'));\n\n    const [tdBig, setTdBig] = useState(parseInt(localStorage.getItem('todayBig') ?? '0'));\n    const [tdSmall, setTdSmall] = useState(parseInt(localStorage.getItem('todaySmall') ?? '0'));\n    const [tdGoal, setTdGoal] = useState(parseInt(localStorage.getItem('todayGoal') ?? '0'));\n\n    useEffect(() => {\n            // let big = parseInt(localStorage.getItem('big'));\n            // let small = parseInt(localStorage.getItem('small'));\n            // let goal = parseInt(localStorage.getItem('goal'));\n            //\n            // let todayBig = parseInt(localStorage.getItem('todayBig'));\n            // let todaySmall = parseInt(localStorage.getItem('todaySmall'));\n            // let tdGoal = parseInt(localStorage.getItem('todayGoal'));\n            // if (big) setBig(big);\n            // if (small) setSmall(small);\n            // if (goal) setGoal(goal);\n            // if (todayBig) setTdBig(todayBig);\n            // if (todaySmall) setTdSmall(todaySmall);\n            // if (tdGoal) {\n            //     setTdGoal(tdGoal)\n            // } else {\n            //     setTdGoal(tdBig + tdSmall);\n            //     localStorage.setItem('todayGoal', tdBig + tdSmall);\n            // }\n\n            // reached goal: reset;\n            let tdCount = tdBig + tdSmall;\n            if (tdCount >= tdGoal) {\n                setTdBig(0);\n                setTdSmall(0)\n            }\n            updateTodayGoal();\n        }\n        , []\n    );\n\n    const updateTodayGoal = () => {\n        let perDay = Math.ceil((goal / 7));\n        let tdCount = tdBig + tdSmall;\n\n        let dateStr = localStorage.getItem('date');\n        let dateStored = dateStr ? new Date(dateStr) : new Date();\n        let now = new Date();\n        let cmpDate1 = new Date(Date.UTC(dateStored.getFullYear(), dateStored.getMonth(), dateStored.getDate()));\n        let cmpDate2 = new Date(Date.UTC(now.getFullYear(), now.getMonth(), now.getDate()));\n        console.log(cmpDate1);\n        console.log(cmpDate2);\n\n        if (cmpDate1 < cmpDate2) { // yesterday\n            if (tdCount < tdGoal) { // not reached goal\n                setTdGoal(tdGoal + perDay);\n                localStorage.setItem('todayGoal', tdGoal + perDay);\n            } else { // reached goal: reset\n                setTdBig(0);\n                setTdSmall(0);\n                setTdGoal(perDay);\n                localStorage.setItem('todayGoal', perDay);\n            }\n        }\n        else { // today\n            if (tdCount < tdGoal && tdCount > perDay) { // not reached goal today but changed goal lower\n                // TODO: tra no hom qua + perDay\n                setTdGoal(tdGoal + perDay);\n                localStorage.setItem('todayGoal', tdGoal + perDay);\n            } else {\n                setTdGoal(perDay);\n                localStorage.setItem('todayGoal', perDay);\n            }\n        }\n        localStorage.setItem('date', now);\n    };\n\n    const updateTodayBig = (value) => {\n        setTdBig(tdBig + value);\n        localStorage.setItem('todayBig', tdBig + value);\n        setBig(big + value);\n        localStorage.setItem('big', big + value);\n    };\n\n    const updateTodaySmall = (value) => {\n        setTdSmall(tdSmall + value);\n        localStorage.setItem('todaySmall', tdSmall + value);\n        setSmall(small + value);\n        localStorage.setItem('small', small + value);\n    };\n\n    const handlePlusBig = () => {\n        updateTodayBig(1);\n    };\n\n    const handleMinusBig = () => {\n        updateTodayBig(-1);\n    };\n\n    const handlePlusSmall = () => {\n        updateTodaySmall(1);\n    };\n\n    const handleMinusSmall = () => {\n        updateTodaySmall(-1);\n    };\n\n    const handleSetGoal = (evt) => {\n        setGoal(evt.target.value);\n        localStorage.setItem('goal', evt.target.value);\n    };\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n        updateTodayGoal();\n    };\n\n    return (\n        <Container className=\"main\" style={{display: \"flex\"}}>\n            <div className=\"stat-table\">\n                <TableContainer component={Paper}>\n                    <Table size=\"small\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align=\"center\" colSpan=\"2\">\n                                    <Button variant=\"contained\" size=\"small\" color=\"secondary\"\n                                            onClick={handleClickOpen}>\n                                        {big + small}/{goal}\n                                    </Button>\n                                </TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell align=\"center\" colSpan=\"2\">Today: {tdBig + tdSmall}/{tdGoal}</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            <TableRow>\n                                <TableCell component=\"th\" scope=\"row\">Big parts</TableCell>\n                                <TableCell align=\"center\">\n                                    <IconButton variant=\"contained\" color=\"error\" size=\"large\"\n                                                onClick={handleMinusBig}>\n                                        <AiFillMinusCircle/>\n                                    </IconButton>\n                                    <span className=\"number\">{big}</span>\n                                    <IconButton variant=\"contained\" color=\"success\" size=\"large\"\n                                                onClick={handlePlusBig}>\n                                        <AiFillPlusCircle/>\n                                    </IconButton>\n                                </TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell component=\"th\" scope=\"row\">Small parts</TableCell>\n                                <TableCell align=\"center\">\n                                    <IconButton variant=\"contained\" color=\"error\" size=\"large\"\n                                                onClick={handleMinusSmall}>\n                                        <AiFillMinusCircle/>\n                                    </IconButton>\n                                    <span className=\"number\">{small}</span>\n                                    <IconButton variant=\"contained\" color=\"success\" size=\"large\"\n                                                onClick={handlePlusSmall}>\n                                        <AiFillPlusCircle/>\n                                    </IconButton>\n                                </TableCell>\n                            </TableRow>\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n\n            <Dialog open={open} onClose={handleClose}>\n                <DialogContent>\n                    <TextField\n                        autoFocus\n                        label=\"Enter goal\"\n                        type=\"number\"\n                        fullWidth\n                        variant=\"filled\"\n                        onChange={handleSetGoal}\n                        value={goal}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose}>Close</Button>\n                </DialogActions>\n            </Dialog>\n        </Container>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport App from './App';\nimport ReactDom from \"react-dom\";\n\n\nReactDom.render(<App/>, document.getElementById(\"root\"));\n"],"sourceRoot":""}